#!/usr/bin/env python

Import('env')
Import('env_modules')

env_sota = env_modules.Clone()

if env.msvc:
    CXXFLAGS=['/std:c++20']
    env_sota['CXXFLAGS'].remove('/std:c++17')
    env_sota.Append(CPPDEFINES=["MSVC"])
else:
    CXXFLAGS=['-std=c++20']
    env_sota['CXXFLAGS'].remove('-std=gnu++17')

if env.editor_build:
    env_sota.Append(CPPDEFINES=["SOTA_ENGINE"])

env_sota.Append(CXXFLAGS=CXXFLAGS)

Export('env_sota')

env_sota.Append(CPPDEFINES=["SOTA_MODULE"])

env_sota.Append(CPPPATH=["src"])
env_sota.Append(CPPPATH=["src/tal"])
env_sota.Append(CPPPATH=["src/polyhedron"])
env_sota.Append(CPPPATH=["src/primitives"])
env_sota.Append(CPPPATH=["src/core"])
env_sota.Append(CPPPATH=["src/prism_impl"])
env_sota.Append(CPPPATH=["src/ridge_impl"])
env_sota.Append(CPPPATH=["src/honeycomb"])
env_sota.Append(CPPPATH=["src/misc"])
env_sota.Append(CPPPATH=["src/algo"])

sources = Glob("register_types.cpp")
sources += Glob("src/*.cpp")
sources += Glob("src/polyhedron/*.cpp")
sources += Glob("src/primitives/*.cpp")
sources += Glob("src/core/*.cpp")
sources += Glob("src/prism_impl/*.cpp")
sources += Glob("src/ridge_impl/*.cpp")
sources += Glob("src/honeycomb/*.cpp")
sources += Glob("src/misc/*.cpp")
sources += Glob("src/algo/*.cpp")

env_sota.add_source_files(env.modules_sources, sources)
